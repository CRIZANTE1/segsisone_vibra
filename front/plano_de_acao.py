import streamlit as st
import pandas as pd
from datetime import date
from auth.auth_utils import is_user_logged_in, authenticate_user

def format_company_display(cid, companies_df):
    if cid is None:
        return "Selecione uma empresa..."
    if companies_df.empty:
        return f"ID: {cid}"
    
    company_name = companies_df[companies_df['id'] == cid]['nome'].iloc[0]
    return company_name

def get_document_link(doc_id: str, employee_manager, docs_manager) -> str | None:
    """
    ‚úÖ NOVO: Busca o link do documento original usando o ID.
    Verifica em ASOs, Treinamentos e Documentos da Empresa.
    
    Args:
        doc_id: ID do documento original
        employee_manager: Manager de funcion√°rios (tem ASOs e Treinamentos)
        docs_manager: Manager de documentos da empresa
    
    Returns:
        str | None: Link do documento ou None se n√£o encontrado
    """
    if not doc_id or str(doc_id).strip() == "":
        return None
    
    doc_id_str = str(doc_id)
    
    # 1. Busca em ASOs
    if not employee_manager.aso_df.empty:
        aso_match = employee_manager.aso_df[employee_manager.aso_df['id'] == doc_id_str]
        if not aso_match.empty:
            link = aso_match.iloc[0].get('arquivo_id')
            if link and str(link).strip():
                return str(link)
    
    # 2. Busca em Treinamentos
    if not employee_manager.training_df.empty:
        training_match = employee_manager.training_df[employee_manager.training_df['id'] == doc_id_str]
        if not training_match.empty:
            link = training_match.iloc[0].get('anexo')
            if link and str(link).strip():
                return str(link)
    
    # 3. Busca em Documentos da Empresa
    if not docs_manager.docs_df.empty:
        doc_match = docs_manager.docs_df[docs_manager.docs_df['id'] == doc_id_str]
        if not doc_match.empty:
            link = doc_match.iloc[0].get('arquivo_id')
            if link and str(link).strip():
                return str(link)
    
    return None

def show_plano_acao_page():
    st.title("üìã Plano de A√ß√£o")
    
    # Verifica autentica√ß√£o
    if not is_user_logged_in():
        st.warning("Fa√ßa login para acessar esta p√°gina.")
        return
    
    if not authenticate_user():
        return
    
    # Verifica se est√° em modo global ou unidade
    is_global_view = st.session_state.get('unit_name') == 'Global'
    
    if is_global_view:
        st.info("üìä Vis√£o Global do Plano de A√ß√£o")
        st.warning("A vis√£o global consolidada ainda n√£o foi implementada. Selecione uma unidade espec√≠fica no menu lateral.")
        return
    
    # Vis√£o por unidade
    if not st.session_state.get('managers_initialized'):
        st.warning("Aguardando inicializa√ß√£o dos dados da unidade...")
        return
    
    action_plan_manager = st.session_state.action_plan_manager
    employee_manager = st.session_state.employee_manager
    docs_manager = st.session_state.docs_manager
    
    # Seletor de empresa
    company_options = [None] + employee_manager.companies_df['id'].tolist()
    selected_company_id = st.selectbox(
        "Selecione uma empresa:",
        options=company_options,
        format_func=lambda cid: format_company_display(cid, employee_manager.companies_df),
        key="company_selector_plano"
    )
    
    if selected_company_id:
        company_name = employee_manager.get_company_name(selected_company_id)
        st.header(f"Itens Pendentes para: {company_name}")
        
        action_items_df = action_plan_manager.get_action_items_by_company(selected_company_id)
        
        pending_items = pd.DataFrame()
        if not action_items_df.empty and 'status' in action_items_df.columns:
            pending_items = action_items_df[
                ~action_items_df['status'].str.lower().isin(['conclu√≠do', 'cancelado'])
            ]
        
        if pending_items.empty:
            st.success("üéâ Nenhuma n√£o conformidade pendente para esta empresa!")
        else:
            for _, row in pending_items.iterrows():
                with st.container(border=True):
                    # ‚úÖ Header com t√≠tulo e bot√£o do PDF
                    col_title, col_link = st.columns([5, 1])
                    
                    with col_title:
                        st.markdown(f"**Item:** {row['item_nao_conforme']}")
                    
                    with col_link:
                        # ‚úÖ Busca o link do documento original
                        doc_id = row.get('id_documento_original')
                        if doc_id:
                            doc_link = get_document_link(doc_id, employee_manager, docs_manager)
                            if doc_link:
                                st.link_button("üìÑ PDF", doc_link, use_container_width=True)
                    
                    # ‚úÖ Informa√ß√µes de rastreabilidade
                    col_info1, col_info2 = st.columns(2)
                    
                    with col_info1:
                        st.caption(f"üè¢ **Empresa:** {company_name}")
                        st.caption(f"üìã **ID Doc:** {row.get('id_documento_original', 'N/A')}")
                    
                    with col_info2:
                        employee_id = row.get('id_funcionario')
                        if employee_id and str(employee_id).strip():
                            employee_name = employee_manager.get_employee_name(employee_id)
                            # ‚úÖ Verifica√ß√£o robusta
                            if employee_name and not employee_name.startswith("ID "):
                                st.caption(f"üë§ **Funcion√°rio:** {employee_name}")
                                st.caption(f"üÜî **ID Func:** {employee_id}")
                            else:
                                st.caption(f"üë§ **Funcion√°rio:** ID {employee_id}")
                    
                    # Refer√™ncia normativa
                    ref_normativa = row.get('referencia_normativa', 'N/A')
                    if ref_normativa and ref_normativa != 'N/A':
                        st.info(f"üìñ **Refer√™ncia Normativa:** {ref_normativa}")
                    
                    # Status e a√ß√£o
                    col1, col2 = st.columns([4, 1])
                    
                    status = row.get('status', 'Aberto')
                    status_color = {
                        'aberto': 'üî¥',
                        'em tratamento': 'üü°',
                        'aguardando': 'üü†'
                    }
                    emoji = status_color.get(status.lower(), '‚ö™')
                    
                    col1.markdown(f"**Status:** {emoji} {status}")
                    
                    if col2.button("‚öôÔ∏è Tratar", key=f"treat_{row['id']}", use_container_width=True):
                        st.session_state.current_item_to_treat = row.to_dict()
                        st.rerun()
    
    # Di√°logo de tratamento de item
    if 'current_item_to_treat' in st.session_state:
        show_treatment_dialog(action_plan_manager)

def show_treatment_dialog(action_plan_manager):
    """Di√°logo para tratar um item do plano de a√ß√£o."""
    @st.dialog("Tratar Item de N√£o Conformidade")
    def treatment_form():
        item = st.session_state.current_item_to_treat
        
        st.markdown(f"**Item:** {item['item_nao_conforme']}")
        st.caption(f"**ID:** {item['id']}")
        
        with st.form("treatment_form"):
            plano_acao = st.text_area(
                "Plano de A√ß√£o", 
                value=item.get('plano_de_acao', ''),
                help="Descreva as a√ß√µes corretivas que ser√£o tomadas"
            )
            
            responsavel = st.text_input(
                "Respons√°vel", 
                value=item.get('responsavel', ''),
                help="Nome do respons√°vel pela corre√ß√£o"
            )
            
            prazo = st.date_input(
                "Prazo", 
                value=None,
                help="Data limite para conclus√£o"
            )
            
            novo_status = st.selectbox(
                "Status", 
                ["Aberto", "Em Tratamento", "Aguardando", "Conclu√≠do", "Cancelado"],
                index=["Aberto", "Em Tratamento", "Aguardando", "Conclu√≠do", "Cancelado"].index(item.get('status', 'Aberto'))
            )
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.form_submit_button("üíæ Salvar", type="primary", use_container_width=True):
                    updates = {
                        'plano_de_acao': plano_acao,
                        'responsavel': responsavel,
                        'status': novo_status
                    }
                    
                    if prazo:
                        updates['prazo'] = prazo.strftime("%d/%m/%Y")
                    
                    if novo_status == "Conclu√≠do":
                        updates['data_conclusao'] = date.today().strftime("%d/%m/%Y")
                    
                    if action_plan_manager.update_action_item(item['id'], updates):
                        st.success("Item atualizado com sucesso!")
                        del st.session_state.current_item_to_treat
                        st.rerun()
                    else:
                        st.error("Falha ao atualizar o item.")
            
            with col2:
                if st.form_submit_button("‚ùå Cancelar", use_container_width=True):
                    del st.session_state.current_item_to_treat
                    st.rerun()
    
    treatment_form()
